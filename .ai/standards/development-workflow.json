{
  "developmentWorkflow": {
    "versionControl": {
      "strategy": "Trunk-based development with feature branches",
      "branches": {
        "main": "Always deployable main branch, protected branch",
        "feature/*": "Short-lived feature branches for development"
      },
      "commitConventions": {
        "format": "type(scope): description",
        "types": ["feat", "fix", "docs", "style", "refactor", "test", "chore"],
        "examples": [
          "feat(web-dashboard): add task sharing with animations",
          "fix(api-core): handle validation errors in API routes",
          "docs(shared-ui): update component documentation",
          "style(shared-ui): update ShadCN component styling"
        ],
        "automation": "Conventional commits for automated versioning"
      },
      "pullRequests": {
        "reviewProcess": "Repository-wide single review process for all PRs",
        "automatedApproval": "PR approval conditional on automated checks",
        "requirements": [
          "Branch must build successfully",
          "All unit tests must pass",
          "Code quality gates must pass",
          "Automated approval if all checks pass"
        ],
        "githubActions": "GitHub Actions run on PR creation and updates"
      }
    },
    "cicdPipeline": {
      "platform": "GitHub Actions",
      "triggers": [
        "Pull request creation/updates",
        "Pushes to main branch",
        "Manual deployment triggers"
      ],
      "nxIntegration": {
        "affectedProjectDetection": "nx affected commands in GitHub Actions",
        "optimization": "Run CI/CD only for projects impacted by changes",
        "dependencies": "Include dependent projects in affected analysis",
        "parallelization": "Parallel execution of independent project builds and tests"
      },
      "stages": {
        "build": {
          "nxBuild": [
            "Install dependencies (npm install --frozen-lockfile)",
            "NX affected build (nx affected:build)",
            "TypeScript type checking across affected projects",
            "Container image building for affected applications",
            "Artifact generation and storage"
          ]
        },
        "test": {
          "sequence": [
            "Run unit tests (nx affected:test) with coverage report",
            "E2E testing with Playwright (nx affected:e2e)",
            "Security vulnerability scan (npm audit)",
            "Code quality checks (nx affected:lint)",
            "Container security scanning",
            "Dependency audit and license compliance"
          ]
        },
        "qualityGates": {
          "performance": [
            "Lighthouse CI for Core Web Vitals",
            "Bundle analyzer for size monitoring",
            "Animation performance validation"
          ],
          "accessibility": [
            "Automated accessibility testing",
            "ShadCN component accessibility validation",
            "Keyboard navigation testing"
          ]
        },
        "deploy": {
          "ephemeralTesting": {
            "trigger": "E2E tests triggered upon completion of application builds",
            "process": [
              "Create ephemeral test environments from scratch",
              "Complete infrastructure deployment using Terraform",
              "Full application component deployment",
              "Database and data store setup with test data",
              "Run E2E tests against ephemeral environment",
              "Tear down environment after test completion"
            ]
          },
          "production": {
            "trigger": "Manual approval after successful testing",
            "platform": "Google Kubernetes Engine (GKE)",
            "process": [
              "Deploy applications to GKE using ArgoCD",
              "Package-based deployment with Helm charts",
              "Health check verification",
              "Monitor application and infrastructure metrics",
              "Update deployment documentation"
            ]
          }
        }
      }
    },
    "localDevelopment": {
      "requirements": {
        "node": "Node.js 18+",
        "packageManager": "pnpm (preferred) or npm",
        "editor": "VS Code with Next.js extensions"
      },
      "setup": [
        "Clone repository",
        "Copy .env.example to .env.local",
        "Run 'pnpm install' for dependencies",
        "Start MongoDB via Docker Compose",
        "Run 'pnpm dev' to start Next.js development server",
        "Access application at http://localhost:3000"
      ],
      "vsCodeExtensions": [
        "ES7+ React/Redux/React-Native snippets",
        "TypeScript and JavaScript Language Features", 
        "ESLint",
        "Prettier",
        "Tailwind CSS IntelliSense",
        "Auto Rename Tag",
        "Bracket Pair Colorizer",
        "GitLens",
        "Thunder Client (for API testing)"
      ],
      "developmentCommands": {
        "dev": "next dev (start development server)",
        "build": "next build (production build)",
        "start": "next start (production server)",
        "lint": "next lint (run ESLint)",
        "test": "vitest (run tests)",
        "test:watch": "vitest --watch (watch mode)",
        "test:e2e": "playwright test (E2E tests)",
        "type-check": "tsc --noEmit (type checking)"
      }
    },
    "releaseManagement": {
      "versioning": "Semantic Versioning (SemVer)",
      "strategy": {
        "major": "Breaking changes, major UI overhauls",
        "minor": "New features, new components, API additions",
        "patch": "Bug fixes, small UI improvements, dependency updates"
      },
      "process": [
        "Create release branch from develop",
        "Update package.json version and changelog",
        "Final testing and performance validation",
        "Visual regression testing for UI changes",
        "Update component documentation",
        "Merge to main with release tag",
        "Deploy to production via Vercel",
        "Merge back to develop"
      ],
      "changelog": {
        "format": "Keep a Changelog format",
        "sections": [
          "Added (new features, components)",
          "Changed (updates to existing features)",
          "Deprecated (features marked for removal)",
          "Removed (deleted features/components)",
          "Fixed (bug fixes)",
          "Security (security improvements)",
          "Performance (optimization improvements)"
        ]
      }
    },
    "rollbackProcedures": {
      "triggers": [
        "Critical bugs in production",
        "Performance degradation (Core Web Vitals)",
        "Security vulnerabilities",
        "Data integrity issues",
        "Animation performance issues"
      ],
      "process": {
        "immediate": [
          "Revert Vercel deployment to previous version",
          "Verify application functionality and performance",
          "Monitor error rates and Core Web Vitals",
          "Check animation performance"
        ],
        "investigation": [
          "Analyze Vercel logs and error reports",
          "Review performance metrics and bundle analysis",
          "Identify root cause of issues",
          "Test fixes in local environment"
        ],
        "recovery": [
          "Apply fixes to develop branch",
          "Test thoroughly in staging with full test suite",
          "Performance and accessibility validation",
          "Deploy hotfix to production",
          "Conduct post-incident review"
        ]
      }
    },
    "qualityAssurance": {
      "codeReview": {
        "checklist": [
          "Code follows Next.js and React best practices",
          "TypeScript types properly defined",
          "ShadCN components used appropriately",
          "Framer Motion animations optimized",
          "Accessibility standards maintained",
          "Tests cover new functionality",
          "Performance impact assessed",
          "Documentation updated if needed",
          "Security considerations addressed"
        ],
        "reviewers": "Minimum 1 peer reviewer, senior developer for architectural changes"
      },
      "testing": {
        "local": "Run full test suite (unit + integration + E2E) before committing",
        "ci": "Automated test execution on pull requests",
        "manual": "User acceptance testing in Vercel preview deployments",
        "performance": "Local Lighthouse testing for performance-critical changes"
      },
      "deployment": {
        "staging": "All features tested in Vercel preview before production",
        "production": "Smoke tests and performance monitoring after deployment",
        "monitoring": "Real-time monitoring for 24 hours after deployment"
      }
    }
  }
}