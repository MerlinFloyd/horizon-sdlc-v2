{
  "infrastructureStandards": {
    "cloudPlatform": {
      "provider": {
        "approved": "Google Cloud Platform (GCP) exclusively",
        "rationale": "Unified cloud platform for consistency, cost optimization, and operational simplicity",
        "restrictions": "No multi-cloud deployments to avoid complexity"
      },
      "organizationStructure": {
        "projects": {
          "naming": "horizon-{env}-{service-type}",
          "examples": [
            "horizon-test-compute",
            "horizon-prod-compute", 
            "horizon-test-data",
            "horizon-prod-data"
          ]
        },
        "folders": "Environment-based folder organization",
        "billing": "Separate billing accounts for test and production"
      },
      "resourceTagging": {
        "mandatory": "All GCP assets must be tagged with mandatory cost attribution tags",
        "requiredTags": {
          "application": "web-dashboard|api-core|blockchain-deployer|shared-ui",
          "project": "Project-specific identifier for cost tracking",
          "environment": "test|prod"
        },
        "enforcement": "Terraform validation ensures all resources include required tags"
      }
    },
    "infrastructureAsCode": {
      "terraform": {
        "strategy": "Distributed Terraform with application-level configs plus global platform",
        "structure": {
          "globalPlatform": "horizon-platform-terraform repository for organization-wide resources",
          "applicationLevel": "Terraform in each NX application repository",
          "modules": "Shared Terraform modules for common patterns"
        },
        "stateManagement": "Remote state storage in GCS with state locking",
        "versioning": "Terraform version pinning for consistency"
      },
      "gcpResourceManagement": {
        "sharedVPC": "Environment-based Shared VPC with service project separation",
        "iamStrategy": "Principle of least privilege with service accounts",
        "networkSecurity": "Network security policies and firewall rules",
        "resourceHierarchy": "Clear resource hierarchy for management and billing"
      },
      "environmentModel": {
        "environments": "Two-environment model: test and production only",
        "accessControl": {
          "test": "Permissive access for development and testing",
          "production": "Restrictive access with approval workflows"
        },
        "resourceSizing": "Environment-appropriate resource sizing"
      }
    },
    "containerOrchestration": {
      "kubernetes": {
        "platform": "Google Kubernetes Engine (GKE) as primary container platform",
        "configuration": "GKE Autopilot for simplified management",
        "networking": "VPC-native networking with IP aliasing",
        "security": "Workload Identity for secure service authentication"
      },
      "clusterManagement": {
        "multiCluster": "Separate clusters for test and production environments",
        "nodeManagement": "Managed node pools with auto-scaling",
        "upgrades": "Automated cluster and node upgrades",
        "monitoring": "Comprehensive cluster monitoring and alerting"
      },
      "workloadManagement": {
        "namespaces": "Namespace isolation for different applications",
        "resourceQuotas": "Resource quotas and limits for cost control",
        "networkPolicies": "Network policies for traffic segmentation",
        "podSecurity": "Pod security standards and policies"
      },
      "serviceMesh": {
        "platform": "Istio as standard service mesh for GKE",
        "rationale": "Service discovery, load balancing, security, and observability for microservices",
        "features": {
          "serviceDiscovery": "Automatic service discovery and registration",
          "loadBalancing": "Intelligent load balancing with circuit breakers",
          "security": "mTLS encryption for inter-service communication",
          "observability": "Distributed tracing and metrics collection"
        },
        "configuration": {
          "installation": "Istio installed via GKE service mesh add-on",
          "ingress": "Istio Ingress Gateway for external traffic",
          "sidecarInjection": "Automatic sidecar injection for all application pods",
          "policies": "Traffic policies and security rules via Istio CRDs"
        },
        "integration": {
          "monitoring": "Istio metrics integrated with Elastic Cloud",
          "tracing": "Distributed tracing via Jaeger integrated with observability stack",
          "security": "Service-to-service authentication and authorization",
          "deployment": "Blue-green and canary deployments via Istio traffic splitting"
        }
      }
    },
    "messagingInfrastructure": {
      "pubSubPlatform": {
        "service": "Google Cloud Pub/Sub as exclusive messaging technology",
        "rationale": "Unified messaging platform with strong consistency and scalability",
        "localDevelopment": "Google Cloud Pub/Sub emulator for local development"
      },
      "topicOrganization": {
        "naming": "{env}-{domain}-{event-type}",
        "examples": [
          "prod-blockchain-contract-event",
          "test-user-action-event",
          "prod-system-integration-event"
        ],
        "retention": "Message retention policies based on event type"
      },
      "messageContracts": {
        "baseContract": "Standardized base message contract with required and optional fields",
        "domainExtensions": "Domain-specific extensions for client, blockchain, and application context",
        "versionManagement": "Message contract versioning for backward compatibility",
        "validation": "Message validation at publish and consume points"
      },
      "contextInjection": {
        "automatic": "Automatic context extraction and injection pipeline",
        "metadata": "Rich metadata for message processing and routing",
        "correlation": "Correlation IDs for distributed tracing",
        "monitoring": "Message flow monitoring and alerting"
      }
    },
    "monitoringInfrastructure": {
      "elasticCloud": {
        "platform": "Elastic Cloud managed service as unified monitoring platform",
        "deployment": "Single Elastic Cloud deployment with environment-based indices",
        "rationale": "Managed service reduces operational overhead while providing enterprise features"
      },
      "dataIngestion": {
        "gcpIntegration": "Cloud Logging → Pub/Sub → Elastic Cloud",
        "kubernetesLogs": "Fluent Bit → Elastic Cloud",
        "applicationMetrics": "OpenTelemetry → Elastic Cloud",
        "infrastructureMetrics": "GCP Monitoring → Elastic Cloud"
      },
      "indexOrganization": {
        "pattern": "{env}-{type}-{application}-{date}",
        "examples": [
          "prod-logs-web-dashboard-2024.01.15",
          "test-metrics-api-core-2024.01.15",
          "prod-traces-blockchain-deployer-2024.01.15"
        ],
        "retention": "Environment-specific retention policies"
      },
      "accessControl": {
        "roleBased": "Role-based access control with environment separation",
        "developers": "Access to test environment data only",
        "devops": "Access to both test and production data",
        "operations": "Full access with administrative privileges"
      }
    },
    "networkingAndSecurity": {
      "vpcDesign": {
        "sharedVPC": "Shared VPC architecture for centralized network management",
        "subnets": "Environment-specific subnets with appropriate CIDR ranges",
        "routing": "Custom routes for traffic control and optimization",
        "peering": "VPC peering for cross-project communication"
      },
      "securityControls": {
        "firewallRules": "Comprehensive firewall rules for traffic control",
        "iamPolicies": "Fine-grained IAM policies for resource access",
        "serviceAccounts": "Service accounts for application authentication",
        "secretsManagement": "Google Secret Manager for sensitive data"
      },
      "loadBalancing": {
        "globalLoadBalancer": "Global HTTP(S) load balancer for web traffic",
        "internalLoadBalancer": "Internal load balancer for service-to-service communication",
        "ssl": "SSL/TLS termination at load balancer",
        "cdn": "Cloud CDN for static content delivery"
      }
    },
    "dataManagement": {
      "databases": {
        "cloudSQL": "Cloud SQL for relational data (PostgreSQL)",
        "firestore": "Firestore for document-based data",
        "memorystore": "Memorystore for Redis caching",
        "backups": "Automated backup and point-in-time recovery"
      },
      "storage": {
        "cloudStorage": "Cloud Storage for object storage",
        "persistentDisks": "Persistent disks for Kubernetes workloads",
        "filestore": "Filestore for shared file systems",
        "lifecycle": "Storage lifecycle management for cost optimization"
      },
      "dataProtection": {
        "encryption": "Encryption at rest and in transit",
        "backups": "Regular backups with retention policies",
        "disasterRecovery": "Disaster recovery procedures and testing",
        "compliance": "Data compliance and governance controls"
      }
    },
    "costManagement": {
      "budgetControl": {
        "budgets": "Environment and project-specific budgets",
        "alerts": "Budget alerts and notifications",
        "quotas": "Resource quotas to prevent cost overruns",
        "monitoring": "Continuous cost monitoring and optimization"
      },
      "resourceOptimization": {
        "rightSizing": "Regular resource right-sizing reviews",
        "scheduling": "Automated resource scheduling for cost savings",
        "commitments": "Committed use discounts for predictable workloads",
        "preemptible": "Preemptible instances for non-critical workloads"
      },
      "costAttribution": {
        "tagging": "Comprehensive resource tagging for cost attribution",
        "reporting": "Detailed cost reports by application and environment",
        "chargeback": "Cost chargeback to application teams",
        "optimization": "Cost optimization recommendations and tracking"
      }
    }
  }
}
