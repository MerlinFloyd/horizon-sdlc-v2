{
  "frontendStandards": {
    "technologyStack": {
      "framework": {
        "approved": "Next.js 14+ with TypeScript",
        "rationale": "Full-stack React framework with SSR/SSG, built-in optimization, excellent developer experience",
        "restrictions": ["No jQuery", "No plain JavaScript for new development"]
      },
      "react": {
        "version": "React 18+",
        "patterns": ["React Server Components", "Client Components", "Custom hooks"],
        "stateManagement": {
          "approved": ["React useState/useContext", "Zustand"],
          "preferred": "React hooks for simple state, Zustand for moderate complexity"
        }
      },
      "typescript": {
        "version": "TypeScript 4.9+",
        "configuration": {
          "strict": true,
          "noImplicitAny": true,
          "exactOptionalPropertyTypes": true
        },
        "requirements": [
          "All functions must have explicit return types",
          "Interface definitions for all data structures",
          "No 'any' types without justification"
        ]
      }
    },
    "uiDesignSystem": {
      "shadcnImplementation": {
        "approach": "Copy-paste approach for component customization",
        "location": "Components in libs/shared/ui with NX library structure",
        "customization": "Theme customization through design tokens",
        "maintenance": "Regular updates from ShadCN upstream with local modifications"
      },
      "componentStandards": {
        "mandatory": "All shared UI components must have Storybook stories",
        "storyTypes": [
          "Default state story showing basic usage",
          "Variant stories (sizes, colors, states)",
          "Interactive stories demonstrating user interactions"
        ],
        "documentation": [
          "Component description and use cases",
          "Props documentation with types and examples",
          "Usage recommendations and guidelines"
        ]
      },
      "tailwindConfiguration": {
        "setup": "Shared Tailwind configuration in workspace root",
        "customization": "Custom design tokens and utility classes",
        "optimization": "PurgeCSS integration for production builds",
        "linting": "Tailwind CSS class ordering and consistency linting"
      },
      "designTokens": {
        "colorSystem": "Semantic color naming with light/dark mode support",
        "typography": "Consistent typography scale and font loading",
        "spacing": "Standardized spacing system and layout grid",
        "customization": "Design token management through CSS custom properties"
      }
    },
    "animationStandards": {
      "framerMotionIntegration": {
        "installation": "Framer Motion as shared dependency",
        "performance": "60fps requirement for all animations",
        "patterns": "Reusable animation patterns in shared library",
        "accessibility": "Built-in accessibility considerations for all animations"
      },
      "performanceRequirements": {
        "frameRate": "60fps for all animations",
        "duration": "Maximum 300ms for micro-interactions, 500ms for page transitions",
        "optimization": "Use transform and opacity for performance",
        "accessibility": "Respect prefers-reduced-motion user preferences"
      },
      "animationPatterns": {
        "pageTransitions": "Layout animations for automatic transitions",
        "microInteractions": "Hover, focus, and click animations",
        "loadingStates": "Skeleton animations and loading indicators",
        "gestureHandling": "Touch and gesture-based interactions"
      }
    },
    "visualRegressionTesting": {
      "framework": "Playwright for visual regression testing",
      "scope": "Limited scope to main pages only",
      "environment": "Local development environment only (not CI/CD)",
      "coverage": [
        "One test per top-level page/route",
        "Test each major step of multi-step processes",
        "Exclude detailed component testing"
      ],
      "implementation": {
        "setup": "Visual regression testing available in local development environment",
        "usage": "Developers run visual tests manually when making UI changes",
        "baselineManagement": "Visual baselines stored locally or in repository"
      }
    },
    "componentArchitecture": {
      "organizationPattern": {
        "structure": "Atomic design principles (atoms, molecules, organisms)",
        "naming": "Consistent component naming conventions",
        "composition": "Component composition and reusability patterns",
        "props": "TypeScript interfaces for all component props"
      },
      "shadcnCustomization": {
        "baseComponents": "Use ShadCN/ui as foundation",
        "customization": "Extend with application-specific styling",
        "theming": "Consistent theming across all components",
        "accessibility": "Maintain accessibility standards in customizations"
      },
      "componentLifecycle": {
        "creation": "Follow established patterns and coding standards",
        "documentation": "Complete Storybook documentation before approval",
        "testing": "Unit tests for component functionality",
        "maintenance": "Regular updates and consistency reviews"
      }
    },
    "renderingStrategy": {
      "nextjsPatterns": {
        "ssg": "Static Site Generation for marketing pages",
        "isr": "Incremental Static Regeneration for dynamic content",
        "csr": "Client-Side Rendering for interactive dashboards",
        "ssr": "Server-Side Rendering for SEO-critical pages"
      },
      "performanceOptimization": {
        "bundleOptimization": "Code splitting and lazy loading",
        "imageOptimization": "Next.js Image component for all images",
        "fontOptimization": "Next.js Font optimization",
        "coreWebVitals": "Optimize for Core Web Vitals metrics"
      }
    },
    "developmentExperience": {
      "hotReloading": "Hot reloading for component changes during development",
      "storybook": "Storybook available for local component development and testing",
      "linting": "Automated linting for accessibility and design system compliance",
      "typeChecking": "Real-time TypeScript type checking"
    },
    "qualityStandards": {
      "codeQuality": {
        "eslint": "Shared ESLint configuration with project-specific overrides",
        "prettier": "Automated code formatting with Prettier",
        "typescript": "TypeScript compilation errors block builds"
      },
      "testing": {
        "unitTests": "85% test coverage for UI component library",
        "visualTesting": "Visual regression testing for component changes",
        "accessibility": "Automated accessibility testing for all components"
      },
      "performance": {
        "bundleSize": "Monitor and optimize bundle size",
        "animations": "Animation performance testing with 60fps requirement",
        "coreWebVitals": "Core Web Vitals monitoring and optimization"
      }
    }
  }
}
