{
  "backendStandards": {
    "technologyStack": {
      "runtime": {
        "approved": ["Node.js 18+", "TypeScript 4.9+"],
        "preferred": "Node.js with TypeScript",
        "restrictions": ["No CommonJS for new projects", "TypeScript required"]
      },
      "frameworks": {
        "approved": ["Express.js 4.18+", "Next.js API Routes"],
        "preferred": "Next.js API Routes with TypeScript",
        "rationale": "Full-stack framework unification, built-in API optimization, serverless-ready"
      },
      "databases": {
        "primary": {
          "approved": ["PostgreSQL", "MongoDB"],
          "preferred": "PostgreSQL for structured data, MongoDB for document storage",
          "rationale": "ACID compliance for critical data, flexibility for evolving schemas"
        },
        "caching": {
          "approved": ["Redis"],
          "rationale": "High-performance caching and session storage"
        }
      }
    },
    "apiDesign": {
      "restfulPatterns": {
        "conventions": "RESTful API design following OpenAPI 3.0 specification",
        "versioning": "API versioning abstracted through libraries",
        "documentation": "OpenAPI documentation for all public APIs",
        "responseFormat": {
          "success": { "data": "payload", "message": "optional", "meta": "pagination/metadata" },
          "error": { "error": "message", "code": "error_code", "details": "validation_errors" }
        }
      },
      "endpointPatterns": {
        "resourceBased": "Resource-based URL structure (/api/users, /api/tasks)",
        "httpMethods": "Proper HTTP method usage (GET, POST, PUT, DELETE, PATCH)",
        "statusCodes": "Appropriate HTTP status codes for all responses",
        "pagination": "Cursor-based pagination for large datasets"
      },
      "validation": {
        "inputValidation": "Comprehensive input validation using Zod or Joi",
        "sanitization": "Input sanitization to prevent injection attacks",
        "typeValidation": "TypeScript type validation at runtime",
        "errorHandling": "Consistent error response format"
      }
    },
    "serviceArchitecture": {
      "layeredArchitecture": {
        "controllers": "Request handling and response formatting",
        "services": "Business logic and domain operations",
        "repositories": "Data access and persistence layer",
        "middleware": "Cross-cutting concerns (auth, logging, validation)"
      },
      "dependencyInjection": {
        "pattern": "Constructor injection for service dependencies",
        "containers": "IoC container for dependency management",
        "testing": "Easy mocking and testing through dependency injection"
      },
      "errorHandling": {
        "globalHandler": "Global error handling middleware",
        "customErrors": "Custom error classes for different error types",
        "logging": "Comprehensive error logging with context",
        "monitoring": "Error tracking and alerting integration"
      }
    },
    "databaseStandards": {
      "ormPatterns": {
        "postgresql": "Prisma ORM for PostgreSQL",
        "mongodb": "Mongoose ODM for MongoDB",
        "migrations": "Database migrations for schema changes",
        "seeding": "Database seeding for development and testing"
      },
      "queryOptimization": {
        "indexing": "Proper database indexing strategy",
        "queryAnalysis": "Query performance analysis and optimization",
        "connectionPooling": "Database connection pooling",
        "caching": "Query result caching with Redis"
      },
      "dataModeling": {
        "normalization": "Proper database normalization for relational data",
        "relationships": "Clear relationship definitions and foreign keys",
        "constraints": "Database constraints for data integrity",
        "validation": "Database-level validation as final safety net"
      },
      "migrationStandards": {
        "documentDatabases": {
          "strategy": "Schema evolution strategy for MongoDB document databases",
          "versioningApproach": "Document-level schema versioning with backward compatibility",
          "migrationProcess": [
            "Add new fields with default values for backward compatibility",
            "Maintain old field names during transition period",
            "Use application-level migration scripts for data transformation",
            "Implement gradual migration with rollback capability"
          ],
          "backwardCompatibility": {
            "required": "All schema changes must maintain backward compatibility for 2 versions",
            "fieldAddition": "New fields must have default values or be optional",
            "fieldRemoval": "Deprecated fields maintained for 2 major versions before removal",
            "dataTransformation": "Gradual data transformation with validation"
          },
          "rollbackProcedures": {
            "strategy": "Application-level rollback with data consistency checks",
            "validation": "Pre-migration validation and post-migration verification",
            "backupRequirement": "Full database backup before any schema migration",
            "testingRequirement": "Migration testing in ephemeral environments before production"
          }
        },
        "migrationTools": {
          "mongodb": "Custom migration scripts with Mongoose schema versioning",
          "postgresql": "Prisma migrations for schema evolution",
          "validation": "Schema validation at application startup",
          "monitoring": "Migration performance and success rate monitoring"
        }
      }
    },
    "authentication": {
      "strategy": {
        "jwt": "JSON Web Tokens for stateless authentication",
        "sessions": "Redis-backed sessions for stateful authentication",
        "oauth": "OAuth 2.0 integration for third-party authentication"
      },
      "authorization": {
        "rbac": "Role-Based Access Control (RBAC)",
        "permissions": "Fine-grained permission system",
        "middleware": "Authorization middleware for route protection",
        "apiKeys": "API key authentication for service-to-service communication"
      },
      "security": {
        "passwordHashing": "bcrypt for password hashing",
        "tokenSecurity": "Secure token generation and validation",
        "rateLimiting": "Rate limiting to prevent abuse",
        "cors": "Proper CORS configuration"
      }
    },
    "messagingIntegration": {
      "pubSubPatterns": {
        "publisher": "Event publishing to Google Cloud Pub/Sub",
        "subscriber": "Event consumption with proper error handling",
        "messageContracts": "Standardized message contracts and schemas",
        "deadLetterQueues": "Dead letter queue handling for failed messages"
      },
      "eventDriven": {
        "eventSourcing": "Event sourcing for audit trails",
        "cqrs": "Command Query Responsibility Segregation where appropriate",
        "sagaPattern": "Saga pattern for distributed transactions",
        "eventualConsistency": "Eventual consistency across services"
      }
    },
    "monitoring": {
      "logging": {
        "structured": "Structured logging with JSON format",
        "levels": "Appropriate log levels (error, warn, info, debug)",
        "correlation": "Correlation IDs for request tracing",
        "sensitive": "No sensitive data in logs"
      },
      "metrics": {
        "application": "Application-level metrics (response times, error rates)",
        "business": "Business metrics and KPIs",
        "infrastructure": "Infrastructure metrics integration",
        "custom": "Custom metrics for domain-specific monitoring"
      },
      "healthChecks": {
        "endpoints": "Health check endpoints for all services",
        "dependencies": "Dependency health checks (database, external APIs)",
        "monitoring": "Integration with monitoring systems",
        "alerting": "Automated alerting on health check failures"
      }
    },
    "testing": {
      "unitTesting": {
        "framework": "Jest for unit testing",
        "coverage": "80% code coverage minimum",
        "mocking": "Proper mocking of external dependencies",
        "testData": "Test data factories and fixtures"
      },
      "integrationTesting": {
        "apiTesting": "API endpoint testing with supertest",
        "databaseTesting": "Database integration testing",
        "externalServices": "External service integration testing",
        "testContainers": "Test containers for isolated testing"
      },
      "performanceTesting": {
        "loadTesting": "Load testing for critical endpoints",
        "stressTesting": "Stress testing for system limits",
        "benchmarking": "Performance benchmarking and regression testing",
        "profiling": "Application profiling for optimization"
      }
    },
    "deployment": {
      "containerization": {
        "docker": "Docker containers for all services",
        "optimization": "Multi-stage builds for production optimization",
        "security": "Security scanning for container images",
        "registry": "Container registry for image storage"
      },
      "orchestration": {
        "kubernetes": "Kubernetes for container orchestration",
        "helm": "Helm charts for deployment management",
        "scaling": "Horizontal Pod Autoscaling (HPA)",
        "monitoring": "Container and pod monitoring"
      }
    }
  }
}
