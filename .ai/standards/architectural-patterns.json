{
  "architecturalPatterns": {
    "terminologyDefinitions": {
      "smartContract": "An application deployed onto a blockchain network",
      "blockchainContract": "Synonym for smart contract - an application compiled and deployed onto a blockchain",
      "contract": "An interface or data shape agreement between two systems (not blockchain-related)",
      "application": "A complete business application consisting of multiple deployable components",
      "app": "A single deployable component (web app, service app, etc.)",
      "service": "A single backend component or microservice"
    },
    "overallArchitecture": {
      "pattern": "NX Monorepo with Microservices and Event-Driven Architecture",
      "rationale": "Unified workspace for multiple applications, shared libraries, independent deployment, and scalable event-driven communication",
      "components": {
        "workspace": "NX monorepo with domain-driven organization",
        "applications": "Multiple applications (web-dashboard, api-core, blockchain-deployer)",
        "sharedLibraries": "Shared libraries for UI, utilities, and types",
        "infrastructure": "Containerized deployment on Google Kubernetes Engine",
        "messaging": "Event-driven communication via Google Cloud Pub/Sub"
      },
      "deploymentStrategy": {
        "containerization": "Docker containers for all applications",
        "orchestration": "Kubernetes with Helm charts for deployment",
        "environments": "Two-environment model (test and production)",
        "cicd": "GitHub Actions with NX affected commands for optimization"
      }
    },
    "nxMonorepoPatterns": {
      "workspaceOrganization": {
        "structure": "Domain-driven organization with clear boundaries",
        "applications": [
          "apps/web-dashboard - Next.js frontend application",
          "apps/api-core - Node.js backend services",
          "apps/blockchain-deployer - Blockchain interaction services"
        ],
        "sharedLibraries": [
          "libs/shared/ui - ShadCN/ui components and design system",
          "libs/shared/utils - Common utility functions",
          "libs/shared/types - TypeScript type definitions"
        ],
        "buildOrchestration": "NX task graph with dependency-aware execution"
      },
      "crossProjectCommunication": {
        "internalAPIs": "Well-defined TypeScript interfaces for internal communication",
        "messagingPatterns": "Event-driven communication via Google Cloud Pub/Sub",
        "sharedInfrastructure": "Common infrastructure patterns in shared libraries"
      },
    "microservicesPatterns": {
      "webDashboard": {
        "pattern": "Next.js frontend application with API routes",
        "responsibilities": "User interface, client-side logic, web API endpoints",
        "dependencies": ["shared/ui", "shared/utils", "shared/types"],
        "communication": "HTTP APIs to api-core, event consumption from Pub/Sub"
      },
      "apiCore": {
        "pattern": "Node.js microservice with Express.js",
        "responsibilities": "Core business logic, data persistence, external API integration",
        "dependencies": ["shared/utils", "shared/types"],
        "communication": "REST APIs, event publishing to Pub/Sub"
      },
      "blockchainDeployer": {
        "pattern": "Node.js service for blockchain interaction",
        "responsibilities": "Smart contract deployment, blockchain monitoring, transaction processing",
        "dependencies": ["shared/utils", "shared/types"],
        "communication": "Event-driven via Pub/Sub, blockchain RPC connections"
      },
      "componentPatterns": {
        "uiComponents": {
          "pattern": "ShadCN/ui with Tailwind customization",
          "implementation": [
            "Use ShadCN/ui Button, Input, Card, Dialog components",
            "Customize with Tailwind CSS variables",
            "Extend with Framer Motion for animations",
            "Maintain accessibility standards"
          ]
        },
        "animations": {
          "pattern": "Framer Motion declarative animations",
          "implementation": [
            "Page transitions with layout animations",
            "Task state changes with micro-interactions",
            "Loading states with skeleton animations", 
            "Gesture-based interactions for task management"
          ],
          "performance": [
            "Use transform and opacity for 60fps animations",
            "Leverage layout animations for automatic transitions",
            "Implement exit animations for smooth removal"
          ]
        }
      }
    },
    "containerizationPatterns": {
      "dockerStandards": {
        "baseImages": "Alpine-based images for minimal attack surface",
        "multiStage": "Multi-stage builds for production optimization",
        "security": "Non-root user, read-only filesystem where possible",
        "coLocation": "Dockerfiles co-located with applications"
      },
      "kubernetesOrchestration": {
        "platform": "Google Kubernetes Engine (GKE) with Autopilot",
        "deployments": "Kubernetes Deployments for stateless applications",
        "services": "Kubernetes Services for internal communication",
        "ingress": "Ingress controllers for external access"
      },
      "helmCharts": {
        "structure": "Helm charts for deployment management",
        "versioning": "Semantic versioning for charts and applications",
        "environments": "Environment-specific values files"
      },
      "apiDesign": {
        "pattern": "RESTful API Routes following Next.js conventions",
        "endpoints": {
          "GET /api/tasks": "Retrieve all tasks",
          "POST /api/tasks": "Create new task",
          "PUT /api/tasks/[id]": "Update existing task", 
          "DELETE /api/tasks/[id]": "Delete task",
          "POST /api/tasks/[id]/share": "Generate shareable link",
          "GET /api/shared/[token]": "Access shared task data"
        },
        "responseFormat": {
          "success": { "data": "payload", "message": "optional" },
          "error": { "error": "message", "code": "error_code", "details": "optional" }
        },
        "edgeRuntime": {
          "suitable": ["GET /api/shared/[token]", "health checks", "simple data fetching"],
          "unsuitable": ["Complex database operations", "File uploads", "Long-running processes"]
        }
      },
      "folderStructure": {
        "pattern": "Next.js API Routes with service layer",
        "structure": {
          "app/api/": "API route handlers",
          "app/api/tasks/": "Task-related API endpoints",
          "app/api/shared/": "Shared task access endpoints",
          "lib/mongodb.ts": "Database connection utility",
          "lib/services/": "Business logic services",
          "lib/models/": "Mongoose schema definitions",
          "lib/validators/": "Request validation schemas",
          "middleware.ts": "Next.js middleware for auth/CORS"
        }
      }
    },
    "eventDrivenArchitecture": {
      "messagingPlatform": {
        "service": "Google Cloud Pub/Sub exclusively",
        "rationale": "Unified messaging platform with strong consistency and scalability",
        "topicOrganization": "{env}-{domain}-{event-type} naming convention"
      },
      "messageContracts": {
        "baseContract": "Standardized base message contract with required and optional fields",
        "domainExtensions": "Domain-specific extensions for client, blockchain, and application context",
        "versionManagement": "Message contract versioning for backward compatibility"
      },
      "eventProcessing": {
        "publishers": "Applications publish events to appropriate topics",
        "subscribers": "Event consumption with proper error handling and retry logic",
        "deadLetterQueues": "Dead letter queue handling for failed messages"
      }
    },
    "blockchainIntegrationPatterns": {
      "multiNetworkSupport": {
        "networks": ["Ethereum", "Polygon", "Solana"],
        "networkSelection": "Choose network based on transaction volume, cost, and performance",
        "fallback": "Graceful fallback when primary network is unavailable"
      },
      "smartContractInteraction": {
        "ethereum": "ethers.js for Ethereum and Polygon interaction",
        "solana": "@solana/web3.js for Solana interaction",
        "eventListening": "Smart contract event listening and processing",
        "transactionHandling": "Transaction submission and confirmation tracking"
      },
      "deploymentPatterns": {
        "upgradeability": "Proxy pattern for upgradeable contracts",
        "packageBased": "Package-based deployment with version coordination",
        "testing": "Comprehensive testing before deployment"
      }
    },
    "infrastructurePatterns": {
      "infrastructureAsCode": {
        "strategy": "Distributed Terraform with application-level configs plus global platform",
        "stateManagement": "Remote state storage in GCS with state locking",
        "modules": "Shared Terraform modules for common patterns"
      },
      "environmentManagement": {
        "environments": "Two-environment model: test and production only",
        "accessControl": "Restrictive for prod, permissive for test",
        "resourceTagging": "Mandatory tagging for cost attribution"
      },
      "monitoringAndObservability": {
        "platform": "Elastic Cloud for unified monitoring",
        "dataIngestion": "Cloud Logging → Pub/Sub → Elastic Cloud",
        "indexOrganization": "{env}-{type}-{application}-{date} pattern",
        "alerting": "Comprehensive alerting across all layers"
      }
    },
    "dataPatterns": {
      "databasePatterns": {
        "postgresql": "Prisma ORM for relational data with ACID compliance",
        "mongodb": "Mongoose ODM for document-based flexible schemas",
        "redis": "Caching layer for performance optimization and session storage"
      },
      "apiDesignPatterns": {
        "restful": "RESTful API design following OpenAPI 3.0 specification",
        "validation": "Comprehensive input validation using Zod or Joi",
        "errorHandling": "Consistent error response format across all APIs",
        "versioning": "API versioning abstracted through libraries"
      },
      "cachingPatterns": {
        "applicationLevel": "Redis for API response caching",
        "blockchainData": "Aggressive caching of blockchain data for performance",
        "sessionStorage": "Redis-backed session storage for authentication"
      }
    },
    "testingPatterns": {
      "unitTesting": {
        "javascript": "Jest for JavaScript/TypeScript with 80% coverage",
        "solidity": "Foundry for smart contract testing with 90% coverage",
        "organization": "Co-located tests with source code",
        "nxIntegration": "nx affected:test for optimized test execution"
      },
      "e2eTesting": {
        "framework": "Playwright for end-to-end testing",
        "environment": "Ephemeral test environments created from scratch",
        "coverage": "80% coverage for critical user journeys",
        "automation": "GitHub Actions trigger E2E tests upon build completion"
      },
      "componentTesting": {
        "framework": "React Testing Library for component behavior testing",
        "documentation": "Storybook for component documentation and visual testing",
        "accessibility": "Automated accessibility testing for all components"
      }
    },
    "decisionTrees": {
      "infrastructureSelection": {
        "gcpServices": {
          "compute": {
            "condition": "Containerized applications",
            "choice": "Google Kubernetes Engine (GKE)",
            "alternative": "Cloud Run for serverless containers"
          },
          "database": {
            "structured": "Cloud SQL (PostgreSQL) for ACID compliance",
            "document": "MongoDB Atlas for flexible schemas",
            "caching": "Memorystore (Redis) for high-performance caching"
          },
          "messaging": {
            "choice": "Google Cloud Pub/Sub exclusively",
            "rationale": "Unified messaging platform with strong consistency"
          }
        }
      },
      "architecturalPatterns": {
        "serviceArchitecture": {
          "monolith": {
            "condition": "Single application with shared database",
            "choice": "Next.js full-stack application",
            "when": "Simple applications, rapid prototyping"
          },
          "microservices": {
            "condition": "Multiple independent services",
            "choice": "NX monorepo with separate applications",
            "when": "Complex applications, team scaling, independent deployment"
          }
        },
        "communicationPatterns": {
          "synchronous": {
            "choice": "REST APIs with Next.js API routes",
            "when": "Request-response patterns, immediate data needs"
          },
          "asynchronous": {
            "choice": "Google Cloud Pub/Sub messaging",
            "when": "Event-driven workflows, decoupled services, eventual consistency"
          }
        }
      },
      "databaseSelection": {
        "postgresql": {
          "when": "ACID compliance required, complex relationships, financial data",
          "choice": "Cloud SQL with Prisma ORM"
        },
        "mongodb": {
          "when": "Flexible schemas, rapid development, document-based data",
          "choice": "MongoDB Atlas with Mongoose ODM"
        },
        "redis": {
          "when": "High-performance caching, session storage, rate limiting",
          "choice": "Memorystore for Redis"
        }
      }
    }
  }
}